import { NextRequest, NextResponse } from 'next/server';

const QUALITY_MODEL_MAP: Record<string, string> = {
  'nano': 'gpt-5-nano',
  'mini': 'gpt-5-mini',
  'high': 'gpt-5',
};

export async function POST(request: NextRequest) {
  try {
    const { companyName, companyType, product, thread, quality = 'mini' } = await request.json();

    if (!companyName || !companyType || !thread) {
      return NextResponse.json(
        { error: 'Company name, type, and thread are required' },
        { status: 400 }
      );
    }

    const apiKey = process.env.OPEN_API_KEY;
    
    if (!apiKey) {
      return NextResponse.json(
        { error: 'OpenAI API key is not configured' },
        { status: 500 }
      );
    }

    // Get the model based on quality level
    const model = QUALITY_MODEL_MAP[quality] || QUALITY_MODEL_MAP['mini'];

    console.log('Generating script for:', { companyName, companyType, product, thread, quality, model });

    const prompt = `You are a professional video advertisement scriptwriter. Create a detailed 12-second video ad script.

Company: ${companyName}
Type: ${companyType}${product ? `\nProduct Details: ${product}` : ''}
Creative Thread: ${thread}

Create a 12-second video ad script with:
- 3 distinct scenes (approximately 3-5 seconds each)
- Specific timing for each scene
- Detailed visual descriptions
- Voice-over (VO) text
- Optional on-screen text for the final scene

Format the script EXACTLY like this example:

12-Second Video Ad Script

Scene 1 — [0-3s | Opening hook]
(Visual: Describe the opening visual in detail)
VO: "Voice-over text here"

Scene 2 — [3-7s | Product introduction/transformation]
(Visual: Describe the main visual)
VO: "Voice-over text here"

Scene 3 — [7-12s | Resolution & brand message]
(Visual: Describe the closing visual)
VO: "Voice-over text here"
On-screen text: Brand tagline

Make it emotional, impactful, and suitable for Sora video generation. Focus on visuals that can be generated by AI.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model,
        messages: [
          {
            role: 'system',
            content: 'You are a professional video advertisement scriptwriter with expertise in short-form content.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('Script generation failed:', errorData);
      return NextResponse.json(
        { 
          error: errorData.error?.message || 'Failed to generate script',
          details: errorData
        },
        { status: response.status }
      );
    }

    const data = await response.json();
    const script = data.choices[0].message.content;

    console.log('Generated script:', script);

    return NextResponse.json({
      success: true,
      script: script,
    });

  } catch (error: any) {
    console.error('Error generating script:', error);
    
    return NextResponse.json(
      { 
        error: error.message || 'Failed to generate script',
        details: error.response?.data || null
      },
      { status: error.status || 500 }
    );
  }
}

